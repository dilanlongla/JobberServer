package com.haibasoft.jobber.entities;
// Generated 01-Sep-2020 05:26:07 by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * Joboffer generated by hbm2java
 */
@Entity
@Table(name = "joboffer")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class Joboffer implements java.io.Serializable {

	private int id;
	private Recruiter recruiter;
	private String offerName;
	private Date startDate;
	private Date endDate;
	private Date postedDate;
	private String description;
	private Long salary;
	private String skill;
	private Boolean offerStatus;
	private String type;
	private Long longitude;
	private Long latitude;
	private String code;
	private String country;
	private String town;
	private String street;
	private Set<Category> categories = new HashSet<Category>(0);
	private Set<Offerseeker> offerseekers = new HashSet<Offerseeker>(0);

	public Joboffer() {
	}

	public Joboffer(int id, Recruiter recruiter) {
		this.id = id;
		this.recruiter = recruiter;
	}

	public Joboffer(int id, Recruiter recruiter, String offerName, Date startDate, Date endDate, Date postedDate,
			String description, Long salary, String skill, Boolean offerStatus, String type, Long longitude,
			Long latitude, String code, String country, String town, String street, Set<Category> categories,
			Set<Offerseeker> offerseekers) {
		this.id = id;
		this.recruiter = recruiter;
		this.offerName = offerName;
		this.startDate = startDate;
		this.endDate = endDate;
		this.postedDate = postedDate;
		this.description = description;
		this.salary = salary;
		this.skill = skill;
		this.offerStatus = offerStatus;
		this.type = type;
		this.longitude = longitude;
		this.latitude = latitude;
		this.code = code;
		this.country = country;
		this.town = town;
		this.street = street;
		this.categories = categories;
		this.offerseekers = offerseekers;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Recruiter_id", nullable = false)
	@JsonBackReference(value = "recruiterjoboffer")
	public Recruiter getRecruiter() {
		return this.recruiter;
	}

	public void setRecruiter(Recruiter recruiter) {
		this.recruiter = recruiter;
	}

	@Column(name = "offerName", length = 254)
	public String getOfferName() {
		return this.offerName;
	}

	public void setOfferName(String offerName) {
		this.offerName = offerName;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "startDate", length = 19)
	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "endDate", length = 19)
	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "postedDate", length = 19)
	public Date getPostedDate() {
		return this.postedDate;
	}

	public void setPostedDate(Date postedDate) {
		this.postedDate = postedDate;
	}

	@Column(name = "description", length = 400)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "salary", precision = 12, scale = 0)
	public Long getSalary() {
		return this.salary;
	}

	public void setSalary(Long salary) {
		this.salary = salary;
	}

	@Column(name = "skill", length = 254)
	public String getSkill() {
		return this.skill;
	}

	public void setSkill(String skill) {
		this.skill = skill;
	}

	@Column(name = "offerStatus")
	public Boolean getOfferStatus() {
		return this.offerStatus;
	}

	public void setOfferStatus(Boolean offerStatus) {
		this.offerStatus = offerStatus;
	}

	@Column(name = "type", length = 254)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Column(name = "longitude", precision = 12, scale = 0)
	public Long getLongitude() {
		return this.longitude;
	}

	public void setLongitude(Long longitude) {
		this.longitude = longitude;
	}

	@Column(name = "lartitude", precision = 12, scale = 0)
	public Long getLatitude() {
		return this.latitude;
	}

	public void setLatitude(Long latitude) {
		this.latitude = latitude;
	}

	@Column(name = "code", length = 254)
	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Column(name = "country", length = 254)
	public String getCountry() {
		return this.country;
	}

	public void setCountry(String country) {
		this.country = country;
	}

	@Column(name = "town", length = 254)
	public String getTown() {
		return this.town;
	}

	public void setTown(String town) {
		this.town = town;
	}

	@Column(name = "street", length = 254)
	public String getStreet() {
		return this.street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "offercategory", joinColumns = {
			@JoinColumn(name = "JobOffer_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "Category_id", nullable = false, updatable = false) })
	public Set<Category> getCategories() {
		return this.categories;
	}

	public void setCategories(Set<Category> categories) {
		this.categories = categories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "joboffer")
	@JsonManagedReference(value = "offerseeker")
	public Set<Offerseeker> getOfferseekers() {
		return this.offerseekers;
	}

	public void setOfferseekers(Set<Offerseeker> offerseekers) {
		this.offerseekers = offerseekers;
	}

}
